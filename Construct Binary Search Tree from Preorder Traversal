Return the root node of a binary search tree that matches the given preorder traversal.

(Recall that a binary search tree is a binary tree where for every node, any descendant of node.left has a value < node.val, and any descendant of node.right has a value > node.val.  Also recall that a preorder traversal displays the value of the node first, then traverses node.left, then traverses node.right.)

Example 1:

Input: [8,5,1,7,10,12]
Output: [8,5,10,1,7,null,12]

Note: 

1 <= preorder.length <= 100
The values of preorder are distinct.


Solution:- 
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    
    TreeNode root;
    
    private void insert(int val) {
        
        TreeNode node = new TreeNode(val);
        if(root == null) root = node;
        else {
            TreeNode temp = root;
            while(true) {
                if(temp.val > val) {
                    if(temp.left == null) {
                        temp.left = node;
                        break;
                    }
                    else temp = temp.left;
                }
                else {
                    if(temp.right == null) {
                        temp.right = node;
                        break;
                    }
                    else temp = temp.right;
                }
            }
        }
    }
    
    public TreeNode bstFromPreorder(int[] preorder) {
        
        for(int i = 0; i < preorder.length; i++) insert(preorder[i]);
        
        return root;
    }
}
