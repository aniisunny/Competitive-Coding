
Time Complexity:- O(N)

/* package codechef; // don't place package name! */

import java.util.*;
import java.lang.*;
import java.io.*;

class Bits {
	char ch;
	long zero, one, a, A, total, bit;
}

class Codechef
{
	static int modulus = 998244353;
	static Bits[] bits;
	
	private static long power(long x, long n) {
		
		long m = n;
        if(m < 0) {
            m = -m;
            x = 1 / x;
        }
        long power = 1;
        while(m > 0) {
            if(m % 2 == 1) power = (power * x) % modulus;
            x = (x * x) % modulus;
            m /= 2;
        }
        return power % modulus;
	}
	
	private static long inverseModulus(long x) {
		return (power(x, modulus - 2)) % modulus;
	}
	
	private static void AND(Stack<Bits> stack, Bits p, Bits op, Bits r) {
		
		long zero = ((p.zero * r.total) + (r.zero * p.total) - (p.zero * r.zero) + (p.a * r.A) + (p.A * r.a)) % modulus;
		long one = (p.one * r.one) % modulus;
		long a = ((p.a * (r.one + r.a)) + (r.a * (p.a + p.one)) - (p.a * r.a)) % modulus;
		r.zero = zero;
		r.one = one;
		r.a = r.A = a;
		r.bit = p.bit + r.bit;
		r.total = r.zero + r.one + r.a + r.A;
	}
	
	private static void OR(Stack<Bits> stack, Bits p, Bits op, Bits r) {
		
		long zero = (p.zero * r.zero) % modulus;
		long one = ((p.one * r.total) + (r.one * p.total) - (p.one * r.one) + (p.a * r.A) + (p.A * r.a)) % modulus;
		long a = ((p.a * (r.zero + r.a)) + (r.a * (p.a + p.zero)) - (p.a * r.a)) % modulus;
		r.zero = zero;
		r.one = one;
		r.a = r.A = a;
		r.bit = p.bit + r.bit;
		r.total = r.zero + r.one + r.a + r.A;
	}
	
	private static void XOR(Stack<Bits> stack, Bits p, Bits op, Bits r) {
		
		long zero = ((p.one * r.one) % modulus + (p.zero * r.zero) % modulus + (p.a * r.a) % modulus + (p.A * r.A) % modulus) % modulus;
		long one = ((p.zero * r.one) % modulus + (p.one * r.zero) % modulus + (p.a * r.A) % modulus + (p.A * r.a) % modulus) % modulus;
		long a = ((p.zero * r.a) % modulus + (p.one * r.A) % modulus + (p.a * r.zero) % modulus + (p.A * r.one) % modulus) % modulus;
		r.zero = zero;
		r.one = one;
		r.a = r.A = a;
		r.bit = p.bit + r.bit;
		r.total = r.zero + r.one + r.a + r.A;
	}
	
	private static void readyBitwise(String s) {
		
		int n = s.length();
		long base = inverseModulus(4);
		if(n <= 4) {
			System.out.println(base + " " + base + " " + base + " " + base);
			return;
		}
		bits = new Bits[n];
		for(int i = 0; i < n; i++) {
			bits[i] = new Bits();
			bits[i].ch = s.charAt(i);
			if(bits[i].ch == '#') {
				bits[i].zero = bits[i].one = bits[i].a = bits[i].A = 1;
				bits[i].total = 4;
				bits[i].bit = 1;
			}
		}
		
		Stack<Bits> stack = new Stack<Bits>();
		for(int i = 0; i < n; i++) {
			if(bits[i].ch != ')') stack.push(bits[i]);
			else {
				Bits p = stack.pop();
				Bits op = stack.pop();
				Bits r = stack.pop();
				stack.pop();
				if(op.ch == '&') AND(stack, p, op, r);
				else if(op.ch == '|') OR(stack, p, op, r);
				else if(op.ch == '^') XOR(stack, p, op, r);
				stack.push(r);
			}
		}
		
		long result = 1;
		long length = stack.peek().bit;
		while(length-- != 0) {
			result *= base;
			result %= modulus;
		}
		
		Bits bit = stack.pop(); 
		System.out.print((bit.zero * result) % modulus + " ");
		System.out.print((bit.one * result) % modulus + " ");
		System.out.print((bit.a * result) % modulus + " ");
		System.out.print((bit.A * result) % modulus + " ");
	}

	public static void main(String[] args) {
		
		Scanner sc = new Scanner(System.in);
		int testCases = sc.nextInt();
		while(testCases-- != 0) {
			String s = sc.next();
			readyBitwise(s);
		}
		sc.close();
	}
}
