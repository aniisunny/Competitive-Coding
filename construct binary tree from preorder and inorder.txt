Given preorder and inorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree.

For example, given

preorder = [3,9,20,15,7]
inorder = [9,3,15,20,7]
Return the following binary tree:

    3
   / \
  9  20
    /  \
   15   7


Solution:-
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    
    int i = 0;
    
    private int helper(int[] inorder, int search) {
        for(int i = 0; i < inorder.length; i++) {
            if(inorder[i] == search)
                return i;
        }
        return -1;
    }
    
    private TreeNode buildTreeHelper(int[] preorder, int[] inorder, int start, int end) {
        if(start > end)
            return null;
        TreeNode root = new TreeNode(preorder[i]);
        i++;
        if(start == end) {
            return root;
        }
        int index = helper(inorder, root.val);
        
        if(start < end) {
            root.left = buildTreeHelper(preorder, inorder, start, index - 1);
            root.right = buildTreeHelper(preorder, inorder, index + 1, end);
        }
        
        return root;
    }
    
    public TreeNode buildTree(int[] preorder, int[] inorder) {
    
        return buildTreeHelper(preorder, inorder, 0, inorder.length - 1);
    }
}