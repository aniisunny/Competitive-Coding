Given inorder and postorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree.

For example, given

inorder = [9,3,15,20,7]
postorder = [9,15,7,20,3]
Return the following binary tree:

    3
   / \
  9  20
    /  \
   15   7
   
   
   Solution:-
   /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    
    HashMap<Integer, Integer> map;
    int i;
    
    private TreeNode helper(int[] inorder, int[] postorder, int start, int end) {
        
        if(start > end) return null;
        
        TreeNode root = new TreeNode(postorder[i]);
        int index = map.get(postorder[i]);
        i--;
        
        if(start < end) {
            root.right = helper(inorder, postorder, index + 1, end);
            root.left = helper(inorder, postorder, start, index - 1);
        }
        
        return root;
    }
    
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        
        i = postorder.length - 1;
        map = new HashMap<Integer, Integer>();
        for(int i = 0; i < inorder.length; i++) map.put(inorder[i], i);
        
        return helper(inorder, postorder, 0, postorder.length - 1);
    }
}
